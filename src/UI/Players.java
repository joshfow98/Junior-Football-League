/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import static UI.Teams.te;
import UI.Home.NoPersonException;
import Objects.Player;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import javax.swing.JOptionPane;
/**
 * UI to update player records.
 * @author joshf
 */
public class Players extends javax.swing.JFrame {

    /**
     * Creates new form Players
     */
    private static Player p;
    /**
     * a.
     */
    public Players() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbTeamName = new javax.swing.JComboBox<>();
        cbPlayerName = new javax.swing.JComboBox<>();
        tfLastName = new javax.swing.JTextField();
        tfPosition = new javax.swing.JTextField();
        tfAddress = new javax.swing.JTextField();
        tfDOB = new javax.swing.JTextField();
        tfNumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfFirstName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cbTeamName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTeamNameItemStateChanged(evt);
            }
        });

        cbPlayerName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbPlayerNameItemStateChanged(evt);
            }
        });

        jLabel1.setText("Team:");

        jLabel2.setText("Name:");

        jLabel3.setText("Last Name:");

        jLabel4.setText("Address:");

        jLabel5.setText("Date Of Birth");

        jLabel6.setText("Contact Number: ");

        jLabel7.setText("Position:");

        jLabel8.setText("First Name:");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbTeamName, 0, 168, Short.MAX_VALUE)
                            .addComponent(cbPlayerName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(tfFirstName)
                            .addComponent(tfLastName)
                            .addComponent(tfNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(tfDOB)
                            .addComponent(tfPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTeamName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate))
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)))
                .addComponent(jLabel8)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(8, 8, 8)
                .addComponent(tfDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        
        Home h = new Home();
        h.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_btnExitActionPerformed

    private void cbTeamNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTeamNameItemStateChanged
        
        PlayerEngine pe = new PlayerEngine();
        
        tfFirstName.setText("");
        tfLastName.setText("");
        tfAddress.setText("");
        tfDOB.setText("");
        tfNumber.setText("");
        tfPosition.setText("");
        
        cbPlayerName.removeAllItems();
        
        String[] playerNames = pe.getPlayerNames(String.valueOf(cbTeamName.getSelectedItem()));
        
        for(int i = 0; i < playerNames.length; i++){
            
            cbPlayerName.addItem(playerNames[i]);
            
        }
        
        
    }//GEN-LAST:event_cbTeamNameItemStateChanged

    private void cbPlayerNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbPlayerNameItemStateChanged

        if(cbPlayerName.getSelectedIndex() > -1){
            
            PlayerEngine pe = new PlayerEngine();
        
            p = pe.getPlayer(String.valueOf(cbPlayerName.getSelectedItem()));
        
            tfFirstName.setText(p.getFirstName());
            tfLastName.setText(p.getLastName());
            tfAddress.setText(p.getAddress());
            tfDOB.setText(String.valueOf(p.getDateOfBirth()));
            tfNumber.setText(p.getTelephoneNumber());
            tfPosition.setText(p.getPosition());
            
        }
        
    }//GEN-LAST:event_cbPlayerNameItemStateChanged

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        
        try{
           
            if(cbPlayerName.getItemCount() == 0){
                
                throw new NoPersonException("There is no player to update");
                
            }
            
            PlayerEngine pe = new PlayerEngine();
        
        
            p.Player(tfFirstName.getText(), tfLastName.getText(), tfAddress.getText(), 
                    Date.valueOf(tfDOB.getText()), tfNumber.getText(), 
                    String.valueOf(cbTeamName.getSelectedItem()), tfPosition.getText());
        
            pe.updatePlayer(p);
        
        }catch (NoPersonException e){
            
            JOptionPane.showMessageDialog(null, e.getMessage());
            
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
        try{
           
            if(cbPlayerName.getItemCount() == 0){
                
                throw new NoPersonException("There is no player to delete");
                
            }
        
            PlayerEngine pe = new PlayerEngine();
            String playerIDString = cbPlayerName.getSelectedItem().toString();
            int playerID = Integer.parseInt(playerIDString.substring(playerIDString.length() - 1));
        
            pe.deletePlayer(playerID);
       
            int currentItem = cbPlayerName.getSelectedIndex();
            
            cbPlayerName.removeItemAt(currentItem);
            
        }catch (NoPersonException e){
            
            JOptionPane.showMessageDialog(null, e.getMessage());
            
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed
    /**
     * Adds all the team names to the combo box.
     */
    public static void setTeamNames(){

        String[] team = te.getTeamNames();
        
        for(int i = 0; i < team.length; i++){
            
            cbTeamName.addItem(team[i]);
            
        }
 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Players.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Players.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Players.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Players.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Players().setVisible(true);
                setTeamNames();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbPlayerName;
    private static javax.swing.JComboBox<String> cbTeamName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField tfAddress;
    private javax.swing.JTextField tfDOB;
    private javax.swing.JTextField tfFirstName;
    private javax.swing.JTextField tfLastName;
    private javax.swing.JTextField tfNumber;
    private javax.swing.JTextField tfPosition;
    // End of variables declaration//GEN-END:variables

    /**
     * Retrieves, edits and deletes player records.
     */
    protected static class PlayerEngine {
    
    private Connection con;
    private Statement stmnt;
    private ResultSet rs;
    private String SQL;
    
    /**
     * This method connects to the Player table in the JFL
     * DB and retrieves all the players and stores them in 
     * a ResultSet.
     */
    public void getConnection(){
        
        try{
            
            String host = "jdbc:derby://localhost:1527/JFL", uName = "JFL", uPass = "JFL";
            con = DriverManager.getConnection(host, uName, uPass);
            
            stmnt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            
            SQL = "SELECT * FROM JFL.PLAYER";
            
            rs = stmnt.executeQuery(SQL);
            
        } catch (SQLException err){
            
            System.out.println(err.getMessage());
            
        }
        
    }
    /**
     * This method retrieves all the names of the players for a particular team.
     * @param teamName
     * @return 
     */
    public String[] getPlayerNames(String teamName){
        
        String[] team = new String[0];
        String tempName;
        int i = 0;
        
        try{
            
           getConnection();
            
            while(rs.next()){
                
                if(rs.getString("team_name").equals(teamName)){
                
                    tempName = rs.getString("first_name") +  " " + rs.getString("last_name") + " " + rs.getInt("player_id");
                
                    team = Arrays.copyOf(team, team.length + 1);
                
                    team[i] = tempName;
                    
                    i++;
                    
                }
                
           
            }
            
            rs.close();
            stmnt.close();
            con.close();
            
        } catch (SQLException err){
            
            System.out.println(err.getMessage());
            
        }
        
        return team;
        
    }
    /**
     * This method retrieves all the data about a particular player using
     * the player ID from the playerName.
     * @param playerName
     * @return 
     */
    public Player getPlayer(String playerName){
        
        Player p = new Player();
        int i = 0, firstBlank = 0, playerID;
        
        while(true){
            
            if(playerName.substring(i, i + 1).equals(" ")){
                
                firstBlank++;
                
                if(firstBlank == 2){
                    
                    playerID = Integer.parseInt(playerName.substring(i + 1));
                    
                    break;
                    
                }
            }
            
            i++;
            
        }
        
        try{
            
           getConnection();
            
            while(rs.next()){
                
                if(rs.getInt("player_id") == playerID){
                
                    p.Player(rs.getString("first_name"), rs.getString("last_name"), rs.getString("address"), rs.getDate("date_of_birth"),
                            rs.getString("telephone_number"), rs.getString("team_name"), rs.getString("position"));
                    p.setPlayerID(rs.getInt("player_id"));
                    
                    break;
                    
                }
           
            }
            
            rs.close();
            stmnt.close();
            con.close();
            
        } catch (SQLException err){
            
            System.out.println(err.getMessage());
            
        }
        
        return p;
        
    }
    /**
     * This method updates the details of the player given in the parameter.
     * @param p 
     */
    public void updatePlayer(Player p){
        
        try{
            
            getConnection();
            
            while(rs.next()){
                
                if(rs.getInt("player_id") == p.getPlayerID()){
                
                    break;
                    
                }
                
            }
            
            rs.updateString("first_name", p.getFirstName());
            rs.updateString("last_name", p.getLastName());
            rs.updateString("address", p.getAddress());
            rs.updateString("telephone_number", p.getTelephoneNumber());
            rs.updateDate("date_of_birth", p.getDateOfBirth());
            rs.updateString("position", p.getPosition());
            
            rs.updateRow();
            
            rs.close();
            stmnt.close();
            con.close();
            
        }catch (SQLException e){
            
            JOptionPane.showMessageDialog(null, e.getMessage());
            
        }
        
    }
    /**
     * This method deletes the player that has the same ID as the given parameter.
     * 
     * @param playerID 
     */
    public void deletePlayer(int playerID){
        
        try{
            
            getConnection();
            
            while(rs.next()){
                
                if(rs.getInt("player_id") == playerID){
                    
                    break;
                    
                }
                
                
            }
            
            rs.deleteRow();
                
            rs.close();
            stmnt.close();
            con.close();
                
        }catch (SQLException e){
            
            JOptionPane.showMessageDialog(null, e.getMessage());
            
        }
        
    }
    
}

}
